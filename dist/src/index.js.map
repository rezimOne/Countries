{"version":3,"file":"./src/index.js","mappings":";;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;;;;;;;;;;;;;;;;;ACHA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAKA;AAAA;AAEA;AAEA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AAAA;AAEA;AAEA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;;;;;;;;;;;;;;;;;AC7CA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;;AAEA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrBA;AAEA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA;AAGA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;;AACA;AACA;AACA;AAEA;AACA;AACA;;AACA;;AACA;AAAA;AAAA;AAAA;;AACA;AACA;AACA;AACA;;AAAA;AAEA;AACA;AACA;;AACA;;AACA;AAAA;AAAA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAEA;AACA;AACA;;AACA;;AACA;AAAA;AAAA;AAAA;;AACA;AACA;AACA;AACA;;AAAA;AAEA;AACA;AACA;;AACA;;AACA;AAAA;AAAA;AAAA;;AACA;AACA;AACA;AACA;;AAAA;AAEA;AACA;AACA;;AACA;;AACA;AAAA;AAAA;AAAA;;AACA;AACA;AACA;AACA;;AAAA;AAEA;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;;AACA;AACA;AACA;AAEA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;;AACA;AAAA;AAAA;AAAA;;AACA;;AACA;AACA;AACA;AACA;;AAAA;AAEA;;AACA;AAAA;AAAA;AAAA;;AACA;;AACA;AACA;AACA;AACA;;AAAA;AAEA;;AACA;AAAA;AAAA;AAAA;;AACA;;AACA;AACA;AACA;AACA;;AAAA;AAEA;;AACA;AAAA;AAAA;AAAA;;AACA;;AACA;AACA;AACA;AACA;;AAAA;AAEA;;AACA;AAAA;AAAA;AAAA;;AACA;;AACA;AACA;AACA;AACA;;AAAA;AAEA;;AACA;AAAA;AAAA;AAAA;;AACA;;AACA;AACA;AACA;AACA;;AAAA;;;;;;;;;;;;;;ACzUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACRA;AACA;AACA;;;;;;;;;;;;;;;ACFA;AACA;AACA;AACA;;;;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACbA;AACA;AACA;;;;;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC5BA;AACA;AACA;;;;;;;;;;;;;;ACFA;AACA;AACA;;;;;;;;;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;;AACA;AAIA;AACA;AACA;;AACA;AAEA;AACA;AACA;;AACA;AAEA;AACA;AACA;;AACA;AAEA;AACA;AACA;;AACA;AAEA;AACA;AACA;;AACA;AAIA;AACA;AACA;;AACA;AAEA;AACA;AACA;;AACA;AAEA;AACA;AACA;;AACA;AAEA;AACA;AACA;;AACA;AAEA;AACA;AACA;;AACA;AAEA;AACA;AACA;;AACA;AAEA;AACA;AACA;;AACA;AAEA;AACA;AACA;;AACA;AAEA;AACA;AACA;;AACA;AAEA;AACA;AACA;;AACA","sources":["webpack://countries/./src/appVariables.ts","webpack://countries/./src/task1/task1.ts","webpack://countries/./src/task2/task2.ts","webpack://countries/./src/task3/task3.ts","webpack://countries/./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","webpack://countries/./node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","webpack://countries/./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","webpack://countries/./node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack://countries/./node_modules/@babel/runtime/helpers/esm/iterableToArray.js","webpack://countries/./node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","webpack://countries/./node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","webpack://countries/./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","webpack://countries/./node_modules/@babel/runtime/helpers/esm/slicedToArray.js","webpack://countries/./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","webpack://countries/./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","webpack://countries/webpack/bootstrap","webpack://countries/webpack/runtime/define property getters","webpack://countries/webpack/runtime/hasOwnProperty shorthand","webpack://countries/webpack/runtime/make namespace object","webpack://countries/./src/index.ts"],"sourcesContent":["import { AppVariables } from '../src/types'\n/*\nobiekt ze zmiennymi uzywanymi w apliakcji\n*/\nexport const appVariables: AppVariables = {\n  API_URL: \"https://restcountries.com/v2/all\",\n  TIME_KEY: \"time\",\n  COUNTRY_KEY: \"countries\",\n  CURRENT_TIME: new Date().getTime(),\n  INTERVAL: 100000,\n  POPULATION_LIMIT: 500000000,\n};","import { LocalStorageMethods, LocalStorage, Countries, } from '../types';\nimport { appVariables } from '../appVariables';\n\nconst { TIME_KEY, COUNTRY_KEY, API_URL, CURRENT_TIME } = appVariables;\n\nconst localStorageMethods: LocalStorageMethods = {\n  getData: (key) => localStorage.getItem(key),\n  setData: (key, value) => localStorage.setItem(key, JSON.stringify(value))\n};\n\nconst { getData, setData } = localStorageMethods;\n\nconst countriesInStorage = getData(COUNTRY_KEY);\n\nexport const countriesLocalStorage: LocalStorage = {\n  fetchTime: Number(getData(TIME_KEY)),\n  storedCountries: countriesInStorage ? JSON.parse(countriesInStorage) : null\n};\nconst { storedCountries } = countriesLocalStorage;\n\nexport const fetchData = () => {\n  fetch(API_URL)\n  .then((res) => res.json())\n  .then((countries) => {\n    console.log('%c * Countries from fetch: ', 'color: #F0CD10', countries)\n\n    const fetchedCountries: Countries[] = countries;\n\n    setData(TIME_KEY, CURRENT_TIME);\n    setData(COUNTRY_KEY, fetchedCountries);\n\n    if (storedCountries) {\n      comparePopulation(fetchedCountries, storedCountries);\n    }\n  })\n  .catch((err) => console.log(err));\n}\n\nexport const countriesWithPopulationChange: string[] = [];\nconst comparePopulation = (currData: Countries[], prevData: Countries[]): string[] => {\n  for (let i = 0; i < prevData.length; i++) {\n    if (currData[i].population !== prevData[i].population) {\n      countriesWithPopulationChange.push(currData[i].name);\n    }\n  }\n  return countriesWithPopulationChange;\n};","import { Countries } from '../types';\nimport { countriesLocalStorage } from '../task1/task1';\n\nconst { storedCountries } = countriesLocalStorage;\n\nexport const countriesFromEU = (countries: Countries[]): Countries[] => {\n  return countries.filter((item) => item.regionalBlocs && item.regionalBlocs.find(el => el.acronym === 'EU'))\n};\n\nconst euCountriesWithoutLetterA: Countries[] = countriesFromEU(storedCountries)\n.filter((item) => !/a/.test(item.name));\n\nexport const euCountriesSortedByPopulation: Countries[] = euCountriesWithoutLetterA\n.sort((a, b) => b.population - a.population);\n\nconst countriesPopulationSum = (countries: Countries[]): number => {\n  return countries\n  .sort((a, b) => b.population - a.population)\n  .slice(0,5)\n  .map((item) => item.population)\n  .reduce((a, b) => a + b);\n}\nexport const topFiveCountriesPopulationSum = countriesPopulationSum(storedCountries);\n","import { Countries, RegionalBlocs } from '../types';\nimport { countriesLocalStorage } from '../task1/task1';\n\nconst { storedCountries } = countriesLocalStorage;\n\nconst regionAcronyms: string[] = ['EU', 'AU', 'NAFTA', 'other'];\n\nconst createRegionObj = (data: string[]): RegionalBlocs | {} => {\n  const obj: RegionalBlocs | {} = {};\n  data.forEach((key) => {\n    obj[key] = {\n      countries: [],\n      currencies: [],\n      languages: {},\n      population: 0\n    }\n  })\n  return obj;\n};\nexport const regionObj = createRegionObj(regionAcronyms);\n\nconst setDataToRegionObj = (countries: Countries[]) => {\n  countries.forEach((country) => {\n    if(country.regionalBlocs){\n      for(let i=0; i < country.regionalBlocs.length; i++){\n        if (country.regionalBlocs[i].acronym === 'EU') {\n          regionObj['EU'].countries.push(country.nativeName)\n          regionObj['EU'].countries.sort().reverse();\n          regionObj['EU'].population += country.population;\n          country.currencies.forEach((countryCurrency) => {\n            if(countryCurrency.code)\n              if (!regionObj['EU'].currencies.includes(countryCurrency.code)) {\n                regionObj['EU'].currencies.push(countryCurrency.code);\n              }\n          });\n          country.languages.forEach((countryLang) => {\n            if(countryLang.iso639_1){\n              if(!regionObj['EU'].languages[countryLang.iso639_1]){\n                regionObj['EU'].languages[countryLang.iso639_1] = {\n                  countries: [],\n                  name: '',\n                  population: 0,\n                  area: 0\n                }\n              }\n              regionObj['EU'].languages[countryLang.iso639_1].countries.push(country.alpha3Code);\n              regionObj['EU'].languages[countryLang.iso639_1].population += country.population;\n              regionObj['EU'].languages[countryLang.iso639_1].area += country.area;\n              regionObj['EU'].languages[countryLang.iso639_1].name = countryLang.nativeName;\n            }\n          });\n        }\n        if (country.regionalBlocs[i].acronym === 'NAFTA') {\n          regionObj['NAFTA'].countries.push(country.nativeName);\n          regionObj['NAFTA'].countries.sort().reverse();\n          regionObj['NAFTA'].population += country.population;\n          country.currencies.forEach((countryCurrency) => {\n            if(countryCurrency.code)\n              if (!regionObj['NAFTA'].currencies.includes(countryCurrency.code)) {\n                regionObj['NAFTA'].currencies.push(countryCurrency.code);\n              }\n          });\n          country.languages.forEach((countryLang) => {\n            if(countryLang.iso639_1){\n              if(!regionObj['NAFTA'].languages[countryLang.iso639_1]){\n                regionObj['NAFTA'].languages[countryLang.iso639_1] = {\n                  countries: [],\n                  name: '',\n                  population: 0,\n                  area: 0\n                }\n              }\n              regionObj['NAFTA'].languages[countryLang.iso639_1].countries.push(country.alpha3Code);\n              regionObj['NAFTA'].languages[countryLang.iso639_1].population += country.population;\n              regionObj['NAFTA'].languages[countryLang.iso639_1].area += country.area;\n              regionObj['NAFTA'].languages[countryLang.iso639_1].name = countryLang.nativeName;\n            }\n          });\n        }\n        if (country.regionalBlocs[i].acronym === 'AU') {\n          regionObj['AU'].countries.push(country.nativeName);\n          regionObj['AU'].countries.sort().reverse();\n          regionObj['AU'].population += country.population;\n          country.currencies.forEach((countryCurrency) => {\n            if(countryCurrency.code)\n              if (!regionObj['AU'].currencies.includes(countryCurrency.code)) {\n                regionObj['AU'].currencies.push(countryCurrency.code);\n              }\n          });\n          country.languages.forEach((countryLang) => {\n            if(countryLang.iso639_1){\n              if(!regionObj['AU'].languages[countryLang.iso639_1]){\n                regionObj['AU'].languages[countryLang.iso639_1] = {\n                  countries: [],\n                  name: '',\n                  population: 0,\n                  area: 0\n                }\n              }\n              regionObj['AU'].languages[countryLang.iso639_1].countries.push(country.alpha3Code);\n              regionObj['AU'].languages[countryLang.iso639_1].population += country.population;\n              regionObj['AU'].languages[countryLang.iso639_1].area += country.area;\n              regionObj['AU'].languages[countryLang.iso639_1].name = countryLang.nativeName;\n            }\n          });\n        }\n        else if(\n          country.regionalBlocs[i].acronym !== 'AU' &&\n          country.regionalBlocs[i].acronym !== 'EU' &&\n          country.regionalBlocs[i].acronym !== 'NAFTA'\n        ){\n          regionObj['other'].countries.push(country.nativeName);\n          regionObj['other'].countries.sort().reverse();\n          regionObj['other'].population += country.population;\n          country.currencies.forEach((countryCurrency) => {\n            if(countryCurrency.code)\n              if (!regionObj['other'].currencies.includes(countryCurrency.code)) {\n                regionObj['other'].currencies.push(countryCurrency.code);\n              }\n          });\n          country.languages.forEach((countryLang) => {\n            if(countryLang.iso639_1){\n              if(!regionObj['other'].languages[countryLang.iso639_1]){\n                regionObj['other'].languages[countryLang.iso639_1] = {\n                  countries: [],\n                  name: '',\n                  population: 0,\n                  area: 0\n                }\n              }\n              regionObj['other'].languages[countryLang.iso639_1].countries.push(country.alpha3Code);\n              regionObj['other'].languages[countryLang.iso639_1].population += country.population;\n              regionObj['other'].languages[countryLang.iso639_1].area += country.area;\n              regionObj['other'].languages[countryLang.iso639_1].name = countryLang.nativeName;\n            }\n          });\n        }\n      }\n    }\n  }\n  );\n};\nsetDataToRegionObj(storedCountries);\n\n\n/*\nObiekt {region: obszar}\n*/\nconst regionAreaObj = {};\nconst regionCountryArea: {}[] = [];\nstoredCountries.forEach((country) => {\n  if(country.regionalBlocs && country.area){\n    for(let i=0; i < country.regionalBlocs.length; i++){\n      for (let key of Object.keys(regionObj)){\n        if (country.regionalBlocs[i].acronym === key && key !== 'other') {\n          regionCountryArea.push({[key]: country.area})\n        }\n      }\n    }\n  }\n});\nregionCountryArea.forEach(item => {\n  for (let [key, val] of Object.entries(item)) {\n    (regionAreaObj[key]) ? regionAreaObj[key] += val: regionAreaObj[key] = val\n  }\n});\n\n/*\nObiekt {region: populacja}\n*/\nconst regionPopulationObj: {} = {};\nfor (let [key, value] of Object.entries(regionObj)){\n  if(key !== 'other'){\n    regionPopulationObj[key] = value.population;\n  }\n};\n\n/*\nObiekt {region: gęstość zaludnienia}\n*/\nconst regionDensityObj: {} = {}\nconst regionDensity = (...objs: any) => {\n  objs.reduce((a: any, b: any) => {\n    for (let key in b) {\n      if(b.hasOwnProperty(key)) {\n        regionDensityObj[key] = Math.round((a[key] || 0) / b[key]);\n      }\n    }\n  });\n};\nregionDensity(regionPopulationObj, regionAreaObj);\n\n/*\nObiekt {region: liczba języków}\n*/\nconst regionNumberOfLanguagesObj: {} = {};\nfor (let [key, value] of Object.entries(regionObj)){\n  if(key !== 'other'){\n    regionNumberOfLanguagesObj[key] = Object.keys(value.languages).length;\n  }\n};\n\n/*\nObiekt {region: liczba walut}\n*/\nconst regionNumberOfCurrenciesObj: {} = {};\nfor (let [key, value] of Object.entries(regionObj)){\n  if(key !== 'other'){\n    regionNumberOfCurrenciesObj[key] = Object.keys(value.currencies).length;\n  }\n};\n\n/*\nObiekt {region: liczba państw członkowskich}\n*/\nconst regionNumberOfCountries: {} = {};\nfor (let [key, value] of Object.entries(regionObj)){\n  if(key !== 'other'){\n    regionNumberOfCountries[key] = Object.keys(value.countries).length;\n  }\n};\n\n/*\nObiekt {natywna nazwa języka: liczba krajów}\n*/\nconst languageNumberOfCountriesObj: {} = {};\nObject.entries(regionObj).forEach((item: any) => {\n  if (item[0] !== 'other') {\n    let languagesList: any = Object.values(item[1].languages);\n    for (let i = 0; i < languagesList.length; i++) {\n      languageNumberOfCountriesObj[languagesList[i].name] = languagesList[i].countries.length;\n    }\n  }\n});\n\n/*\nObiekt {natywna nazwa języka: populacja}\n*/\nconst languagePopulationObj: {} = {};\nconst languagePopulation: any[] = [];\nObject.entries(regionObj).forEach((item) => {\n  if (item[0] !== 'other') {\n    let languagesList: any = Object.values(item[1].languages);\n    for (let i = 0; i < languagesList.length; i++) {\n      if(languagesList[i].population){\n        languagePopulation.push({[languagesList[i].name]: languagesList[i].population});\n      }\n    }\n  }\n});\nlanguagePopulation.forEach(item => {\n  for (let [key, val] of Object.entries(item)) {\n    (languagePopulationObj[key]) ? languagePopulationObj[key] += val: languagePopulationObj[key] = val;\n  }\n});\n\n/*\nObiekt {natywna nazwa języka: obszar kraju}\n*/\nconst languageAreaObj: {} = {};\nconst languageArea: any[] = [];\nObject.entries(regionObj).forEach((item) => {\n  if (item[0] !== 'other') {\n    let languagesList: any = Object.values(item[1].languages);\n    for (let i = 0; i < languagesList.length; i++) {\n      if(languagesList[i].area){\n        languageArea.push({[languagesList[i].name]: languagesList[i].area});\n      }\n    }\n  }\n});\nlanguageArea.forEach(item => {\n  for (let [key, val] of Object.entries(item)) {\n    (languageAreaObj[key]) ? languageAreaObj[key] += val: languageAreaObj[key] = val;\n  }\n});\n\nexport const regionHighestPopulation = Object.keys(regionPopulationObj).sort((a, b) => regionPopulationObj[b] - regionPopulationObj[a]);\n\nexport const regionSecondHighestDensity = Object.keys(regionDensityObj).sort((a, b) => regionDensityObj[b] - regionDensityObj[a]);\n\nexport const regionThirdHighestArea = Object.keys(regionAreaObj).sort((a, b) => regionAreaObj[b] - regionAreaObj[a]);\n\nexport const regionWithMinMaxNumberOfLanguages: string[] = [];\nfor(let [key, val] of Object.entries(regionNumberOfLanguagesObj)){\n  let numberOfLanguages: number[] = Object.values(regionNumberOfLanguagesObj);\n  if(val === Math.max(...numberOfLanguages) || val === Math.min(...numberOfLanguages)){\n    regionWithMinMaxNumberOfLanguages.push(key);\n  }\n};\n\nexport let regionWithMaxNumberOfCurrencies: string = ''; //const nie mozna nadpisać\nfor (let [key, val] of Object.entries(regionNumberOfCurrenciesObj)){\n  let numberOfCurrencies: number[] = Object.values(regionNumberOfCurrenciesObj);\n  if(val === Math.max(...numberOfCurrencies)){\n    regionWithMaxNumberOfCurrencies = key;\n  }\n};\n\nexport let regionWithMinNumberOfCountries: string = '';\nfor (let [key, val] of Object.entries(regionNumberOfCountries)){\n  let numberOfCountries: number[] = Object.values(regionNumberOfCountries);\n  if(val === Math.min(...numberOfCountries)){\n    regionWithMinNumberOfCountries = key;\n  }\n};\n\nexport let mostPopularLanguageByCountries: string = '';\nfor (let [key, val] of Object.entries(languageNumberOfCountriesObj)){\n  let languageCountriesNumber: number[] = Object.values(languageNumberOfCountriesObj);\n  if(val === Math.max(...languageCountriesNumber)){\n    mostPopularLanguageByCountries = key;\n  }\n};\n\nexport let lessPopularLanguageByPeople: string = '';\nfor (let [key, val] of Object.entries(languagePopulationObj)){\n  let populationNumber: number[] = Object.values(languagePopulationObj);\n  if(val === Math.min(...populationNumber)){\n    lessPopularLanguageByPeople = key;\n  }\n};\n\nexport const languagesOnMinMaxAreas: string[] = [];\nfor(let [key, val] of Object.entries(languageAreaObj)){\n  let areaOfLanguages: number[] = Object.values(languageAreaObj);\n  if(val === Math.max(...areaOfLanguages) || val === Math.min(...areaOfLanguages)){\n    languagesOnMinMaxAreas.push(key);\n  }\n};","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { appVariables } from '../src/appVariables'\nimport { countriesLocalStorage, countriesWithPopulationChange, fetchData } from './task1/task1';\nimport { euCountriesSortedByPopulation, topFiveCountriesPopulationSum, countriesFromEU } from './task2/task2';\nimport { languagesOnMinMaxAreas, lessPopularLanguageByPeople, mostPopularLanguageByCountries, regionHighestPopulation, regionObj, regionSecondHighestDensity, regionThirdHighestArea, regionWithMaxNumberOfCurrencies, regionWithMinMaxNumberOfLanguages, regionWithMinNumberOfCountries } from './task3/task3';\n\nconst { CURRENT_TIME, INTERVAL, POPULATION_LIMIT } = appVariables;\nconst { fetchTime, storedCountries } = countriesLocalStorage;\n\n/*\nWywołanie funkcji fetchData\n*/\n(!storedCountries || fetchTime + INTERVAL <= CURRENT_TIME)\n? fetchData()\n: console.log('%c * Countries from localStorage:','color: #F40AEA', storedCountries);\n\n/*\nKraje, w których zmieniła się populacja\n*/\nconsole.log('%c * Countries with population change:', 'color: #F40AEA', countriesWithPopulationChange);\n\n/*\nLista krajów EU\n*/\nconsole.log('%c * EU countries:', 'color: #F4B10A', countriesFromEU(storedCountries));\n\n/*\nFiltrowanie zwróconych krajów EU bez litery 'a' w nazwie kraju\n*/\nconsole.log('%c * EU countries without letter \"a\" sorted desc:', 'color: #F4B10A', euCountriesSortedByPopulation);\n\n/*\nSuma 5 krajów o największej populacji\n*/\nconsole.log('%c * Top Five countries population sum:', 'color: #F4B10A', topFiveCountriesPopulationSum);\n\n/*\nSuma 5 krajów o największej populacji\n*/\n(topFiveCountriesPopulationSum > POPULATION_LIMIT)\n? console.log(`%c * Top Five countries population sum equals to ${topFiveCountriesPopulationSum} is greater than 500 mln citizens.`, 'color: #F4B10A')\n: console.log(`%c * Top Five countries population sum equals to ${topFiveCountriesPopulationSum} is smaller than 500 mln citizens.`, 'color: #F4B10A')\n\n/*\nUtworzenie obiektu z regionami\n*/\nconsole.log('%c * Region object:', 'color: #CDEF32', regionObj);\n\n/*\nOrganizacja o największej populacji\n*/\nconsole.log('%c * Highest population region:', 'color: #CDEF32', regionHighestPopulation[0]);\n\n/*\nOrganizacja o drugiej największej gęstości zaludnienia\n*/\nconsole.log('%c * Seocnd highest population density region:', 'color: #CDEF32', regionSecondHighestDensity[1]);\n\n/*\nOrganizacja o trzecim największym obszarze\n*/\nconsole.log('%c * Third highest area region:', 'color: #CDEF32', regionThirdHighestArea[2]);\n\n/*\nOrganizacja o największej i najmniejszej liczbie języków\n*/\nconsole.log('%c * Regions with max & min number of languages:', 'color: #CDEF32', regionWithMinMaxNumberOfLanguages);\n\n/*\nOrganizacja z największą liczbą walut\n*/\nconsole.log('%c * Region with max number of currencies:', 'color: #CDEF32', regionWithMaxNumberOfCurrencies);\n\n/*\nOrganizacja z najmniejszą liczbą pańśtw członkowskich\n*/\nconsole.log('%c * Region with min number of countries:', 'color: #CDEF32', regionWithMinNumberOfCountries);\n\n/*\nNatywna nazwa języka uzywanego w największej liczbie krajów\n*/\nconsole.log('%c * The most popular language by countries is:', 'color: #CDEF32', mostPopularLanguageByCountries);\n\n/*\nNatywna nazwa języka uzywanego przez najmniejszą liczbę ludzi\n*/\nconsole.log('%c * The less popular language by population is:', 'color: #CDEF32', lessPopularLanguageByPeople);\n\n/*\nNazwy języków uzywanych na największym i najmnijeszym obszarze\n*/\nconsole.log('%c * Languages of max & min area:', 'color: #CDEF32', languagesOnMinMaxAreas);"],"names":[],"sourceRoot":""}